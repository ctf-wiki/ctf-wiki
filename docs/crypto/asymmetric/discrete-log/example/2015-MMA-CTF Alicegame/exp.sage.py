
# This file was *autogenerated* from the file exp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1024 = Integer(1024); _sage_const_512 = Integer(512); _sage_const_17 = Integer(17); _sage_const_9999 = Integer(9999); _sage_const_50 = Integer(50)
import socket
from Crypto.Util.number import *
from sage.all import *


def get_maxfactor(N):
    f = factor(N)
    print 'factor done'
    return f[-_sage_const_1 ][_sage_const_0 ]

maxnumber = _sage_const_1  << _sage_const_50 
i = _sage_const_0 
while _sage_const_1 :
    print 'cycle: ',i
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(("localhost", _sage_const_9999 ))
    sock.recv(_sage_const_17 )
    # get g,h
    sock.recv(_sage_const_512 )
    sock.sendall("1\n")
    sock.recv(_sage_const_512 )
    sock.sendall("1\n")
    data = sock.recv(_sage_const_1024 )
    print data
    if data.startswith('r'):
       sock.close()
       print 'continue'
       continue
    if '\n' in data:
        data =data[:data.index('\n')]
    else:
        # receive m=
        sock.recv(_sage_const_1024 )
    (g,h) = eval(data)
    
    # get g,p
    sock.sendall("-1\n")
    sock.recv(_sage_const_512 )
    sock.sendall("1\n")
    data = sock.recv(_sage_const_1024 )
    print data
    if data.startswith('r'):
       sock.close()
       print 'continue'
       continue
    if '\n' in data:
        data = data[:data.index('\n')]
    else:
        # receive m=
        sock.recv(_sage_const_512 )
    (g,tmp) = eval(data)
    p = tmp+h
    tmp = get_maxfactor(p-_sage_const_1 )
    if tmp<maxnumber:
        print 'may be success'
        # skip the for cycle
        sock.sendall('quit\n');
        data = sock.recv(_sage_const_1024 )
        print 'receive data: ',data
        data = data[data.index(":")+_sage_const_1 :]
        (c1,c2)=eval(data)
        # generate the group
        g = Mod(g, p)
        h = Mod(h, p)
        c1 = Mod(c1, p)
        c2 = Mod(c2, p)
        x = discrete_log(h, g)
        print "x = ", x
        print "Flag: ", long_to_bytes(long(c2 / ( c1 ** x)))
    sock.sendall('quit\n')
    sock.recv(_sage_const_1024 )
    sock.close()
    i += _sage_const_1 

